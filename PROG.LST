Turbo Assembler	 Version 4.1	    05/29/25 23:37:23	    Page 1
prog.asm



      1	    0000			 .model	small
      2					 .386
      3					 public	InsBlanks
      4
      5	    0000			 .code
      6	    0000			 InsBlanks proc	near
      7	    0000  55			     push bp
      8	    0001  8B EC			     mov bp, sp
      9	    0003  56			     push si
     10	    0004  57			     push di
     11	    0005  53			     push bx
     12	    0006  51			     push cx
     13	    0007  52			     push dx
     14
     15	    0008  8B 76	08		     mov si, [bp+8]   ;	Адрес исходной строки
     16	    000B  8B 7E	04		     mov di, [bp+4]   ;	Адрес буфера	результата
     17	    000E  8B 5E	06		     mov bx, [bp+6]   ;	Требуемая длина (k)
     18
     19					     ; Проверка	на пустую строку
     20	    0011  80 3C	00		     cmp byte ptr [si],	0
     21	    0014  0F 84	00A2		     je	copy_direct
     22
     23					     ; Подсчет длины строки и количества слов
     24	    0018  33 C9			     xor cx, cx	       ; длина строки
     25	    001A  33 D2			     xor dx, dx	       ; счетчик	слов
     26	    001C  B4 00			     mov ah, 0	       ; флаг внутри слова (0=нет, 1=да)
     27
     28	    001E			 count_loop:
     29	    001E  8A 04			     mov al, [si]
     30	    0020  3C 00			     cmp al, 0	       ; конец строки?
     31	    0022  74 1A	90 90		     je	end_count
     32	    0026  41			     inc cx	       ; увеличиваем	длину
     33	    0027  3C 20			     cmp al, ' '
     34	    0029  74 0E	90 90		     je	space_char
     35
     36					     ; Обработка НЕ-пробела
     37	    002D  84 E4			     test ah, ah       ; уже	внутри слова?
     38	    002F  75 05	90 90		     jnz not_new_word
     39	    0033  42			     inc dx	       ; новое слово
     40	    0034  B4 01			     mov ah, 1	       ; устанавливаем флаг "внутри слова"
     41	    0036			 not_new_word:
     42	    0036  EB 03	90		     jmp next_char
     43
     44	    0039			 space_char:
     45	    0039  B4 00			     mov ah, 0	       ; сбрасываем флаг "внутри слова"
     46	    003B			 next_char:
     47	    003B  46			     inc si
     48	    003C  EB E0			     jmp count_loop
     49
     50	    003E			 end_count:
     51					     ; Восстановление указателя на начало строки
     52	    003E  8B 76	08		     mov si, [bp+8]
     53
     54					     ; Проверка	необходимости обработки
     55	    0041  3B CB			     cmp cx, bx		; сравнение текущей длины с k
     56	    0043  73 75	90 90		     jae copy_direct	; если >=, копируем	без изменений
     57	    0047  85 D2			     test dx, dx	; если слов нет
Turbo Assembler	 Version 4.1	    05/29/25 23:37:23	    Page 2
prog.asm



     58	    0049  74 6F	90 90		     jz	copy_direct
     59	    004D  83 FA	01		     cmp dx, 1		; если только	одно слово
     60	    0050  74 45	90 90		     je	handle_single_word
     61
     62					     ; Вычисление параметров для	распределения	    +
     63					 пробелов
     64	    0054  8B C3			     mov ax, bx		; ax = k
     65	    0056  2B C1			     sub ax, cx		; ax = количество пробелов для		    +
     66					 добавления
     67	    0058  8B CA			     mov cx, dx		; cx = количество слов
     68	    005A  49			     dec cx		; cx = количество промежутков (n-1)
     69
     70					     ; Вычисление p и q
     71	    005B  33 D2			     xor dx, dx
     72	    005D  F7 F1			     div cx		; ax = p, dx = q
     73
     74					     ; Инициализация
     75	    005F  33 C9			     xor cx, cx		; счетчик промежутков	(индекс		    +
     76					 текущего промежутка)
     77	    0061  8B D8			     mov bx, ax		; сохраняем p в bx
     78
     79	    0063			 copy_loop:
     80	    0063  8A 04			     mov al, [si]
     81	    0065  46			     inc si
     82	    0066  84 C0			     test al, al	; конец строки?
     83	    0068  74 27	90 90		     jz	end_ins
     84
     85	    006C  3C 20			     cmp al, ' '
     86	    006E  75 1C	90 90		     jne copy_char
     87
     88					     ; Обработка пробела: вставляем дополнительные   +
     89					 пробелы
     90	    0072  51			     push cx		; сохраняем счетчик промежутков
     91	    0073  B9 0001		     mov cx, 1		; минимум 1 пробел
     92	    0076  03 CB			     add cx, bx		; + p пробелов
     93
     94					     ; Проверяем, нужно ли добавить дополнительный    +
     95					 пробел
     96	    0078  58			     pop ax		; ax = текущий индекс промежутка
     97	    0079  3B C2			     cmp ax, dx		; сравнение с	q
     98	    007B  73 03	90 90		     jae no_extra
     99	    007F  41			     inc cx		; добавляем дополнительный пробел
    100	    0080			 no_extra:
    101	    0080  50			     push ax		; сохраняем индекс обратно
    102
    103					     ; Вставляем пробелы
    104	    0081  B0 20			     mov al, ' '
    105	    0083			 insert_spaces:
    106	    0083  88 05			     mov [di], al
    107	    0085  47			     inc di
    108	    0086  E2 FB			     loop insert_spaces
    109
    110	    0088  59			     pop cx		; восстанавливаем индекс промежутка
    111	    0089  41			     inc cx		; увеличиваем индекс промежутка
    112	    008A  EB D7			     jmp copy_loop
    113
    114	    008C			 copy_char:
Turbo Assembler	 Version 4.1	    05/29/25 23:37:23	    Page 3
prog.asm



    115	    008C  88 05			     mov [di], al
    116	    008E  47			     inc di
    117	    008F  EB D2			     jmp copy_loop
    118
    119	    0091			 end_ins:
    120	    0091  C6 05	00		     mov byte ptr [di],	0
    121	    0094  EB 2E	90		     jmp done
    122
    123	    0097			 handle_single_word:
    124					     ; Копируем	слово
    125	    0097  8A 04			     mov al, [si]
    126	    0099  84 C0			     test al, al
    127	    009B  74 08	90 90		     jz	add_tail_spaces
    128	    009F  88 05			     mov [di], al
    129	    00A1  47			     inc di
    130	    00A2  46			     inc si
    131	    00A3  EB F2			     jmp handle_single_word
    132
    133	    00A5			 add_tail_spaces:
    134					     ; Добавляем пробелы в конец
    135	    00A5  8B 46	06		     mov ax, [bp+6]    ; k
    136	    00A8  2B C1			     sub ax, cx	       ; ax = количество пробелов для		    +
    137					 добавления
    138	    00AA  8B C8			     mov cx, ax
    139	    00AC  7E 06	90 90		     jle done_tail     ; если не нужно добавлять пробелы
    140	    00B0  B0 20			     mov al, ' '
    141	    00B2  F3> AA		 rep stosb
    142	    00B4			 done_tail:
    143	    00B4  C6 05	00		     mov byte ptr [di],	0
    144	    00B7  EB 0B	90		     jmp done
    145
    146	    00BA			 copy_direct:
    147					     ; Простое копирование строки
    148	    00BA  8A 04			     mov al, [si]
    149	    00BC  88 05			     mov [di], al
    150	    00BE  46			     inc si
    151	    00BF  47			     inc di
    152	    00C0  84 C0			     test al, al
    153	    00C2  75 F6			     jnz copy_direct
    154
    155	    00C4			 done:
    156	    00C4  5A			     pop dx
    157	    00C5  59			     pop cx
    158	    00C6  5B			     pop bx
    159	    00C7  5F			     pop di
    160	    00C8  5E			     pop si
    161	    00C9  5D			     pop bp
    162	    00CA  C2 0006		     ret 6
    163	    00CD			 InsBlanks endp
    164					 end
Turbo Assembler	 Version 4.1	    05/29/25 23:37:23	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05/29/25"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "23:37:23"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADD_TAIL_SPACES			  Near	 _TEXT:00A5
COPY_CHAR			  Near	 _TEXT:008C
COPY_DIRECT			  Near	 _TEXT:00BA
COPY_LOOP			  Near	 _TEXT:0063
COUNT_LOOP			  Near	 _TEXT:001E
DONE				  Near	 _TEXT:00C4
DONE_TAIL			  Near	 _TEXT:00B4
END_COUNT			  Near	 _TEXT:003E
END_INS				  Near	 _TEXT:0091
HANDLE_SINGLE_WORD		  Near	 _TEXT:0097
INSBLANKS			  Near	 _TEXT:0000
INSERT_SPACES			  Near	 _TEXT:0083
NEXT_CHAR			  Near	 _TEXT:003B
NOT_NEW_WORD			  Near	 _TEXT:0036
NO_EXTRA			  Near	 _TEXT:0080
SPACE_CHAR			  Near	 _TEXT:0039

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
_TEXT				  16  00CD Word	  Public  CODE
