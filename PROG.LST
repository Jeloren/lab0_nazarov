Turbo Assembler	 Version 4.1	    05/30/25 09:09:23	    Page 1
prog.asm



      1	    0000			 .model	small	    ; Модель памяти	small (64KB для кода и данных)
      2					 .386		    ; Используем 386 инструкции
      3					 public	InsBlanks   ; Делаем процедуру InsBlanks	доступной из	    +
      4					 других модулей
      5
      6	    0000			 .code
      7	    0000			 InsBlanks proc	near
      8	    0000  55			     push bp	    ; Сохраняем BP (базовый указатель стека)
      9	    0001  8B EC			     mov bp, sp	    ; Устанавливаем BP на текущую	вершину	    +
     10					 стека
     11	    0003  56			     push si	    ; Сохраняем регистры, которые будем	    +
     12					 использовать
     13	    0004  57			     push di
     14	    0005  53			     push bx
     15	    0006  51			     push cx
     16	    0007  52			     push dx
     17
     18					     ; Загружаем параметры из стека
     19	    0008  8B 76	08		     mov si, [bp+8] ; SI = адрес исходной строки (1-й аргумент)
     20	    000B  8B 7E	04		     mov di, [bp+4] ; DI = адрес буфера результата	(3-й		    +
     21					 аргумент)
     22	    000E  8B 5E	06		     mov bx, [bp+6] ; BX = требуемая длина k (2-й аргумент)
     23
     24					     ; Проверка	на пустую строку
     25	    0011  80 3C	00		     cmp byte ptr [si],	0
     26	    0014  0F 84	00A2		     je	copy_direct ; Если строка пустая, переходим к		    +
     27					 копированию
     28
     29					     ; Подсчет длины строки (CX) и количества слов (DX)
     30	    0018  33 C9			     xor cx, cx	    ; CX = длина строки
     31	    001A  33 D2			     xor dx, dx	    ; DX = количество	слов
     32	    001C  B4 00			     mov ah, 0	    ; AH = флаг "внутри слова" (0 = нет, 1 = да)
     33
     34	    001E			 count_loop:
     35	    001E  8A 04			     mov al, [si]   ; Читаем символ	из строки
     36	    0020  3C 00			     cmp al, 0	    ; Если конец строки (0), выходим
     37	    0022  74 1A	90 90		     je	end_count
     38	    0026  41			     inc cx	    ; Увеличиваем длину	строки
     39	    0027  3C 20			     cmp al, ' '    ; Если пробел, обрабатываем
     40	    0029  74 0E	90 90		     je	space_char
     41
     42					     ; Обработка НЕ-пробела (часть слова)
     43	    002D  84 E4			     test ah, ah    ; Проверяем, внутри ли слова
     44	    002F  75 05	90 90		     jnz not_new_word ;	Если уже	внутри слова, пропускаем
     45	    0033  42			     inc dx	    ; Иначе увеличиваем	счетчик слов
     46	    0034  B4 01			     mov ah, 1	    ; Устанавливаем флаг "внутри	слова"
     47	    0036			 not_new_word:
     48	    0036  EB 03	90		     jmp next_char
     49
     50	    0039			 space_char:
     51	    0039  B4 00			     mov ah, 0	    ; Сбрасываем флаг "внутри слова"
     52	    003B			 next_char:
     53	    003B  46			     inc si	    ; Переходим к следующему символу
     54	    003C  EB E0			     jmp count_loop
     55
     56	    003E			 end_count:
     57					     ; Восстанавливаем указатель на начало строки
Turbo Assembler	 Version 4.1	    05/30/25 09:09:23	    Page 2
prog.asm



     58	    003E  8B 76	08		     mov si, [bp+8]
     59
     60					     ; Проверяем, нужно ли добавлять пробелы
     61	    0041  3B CB			     cmp cx, bx	    ; Если текущая длина >= k, просто копируем
     62	    0043  73 75	90 90		     jae copy_direct
     63	    0047  85 D2			     test dx, dx    ; Если слов	нет,	копируем
     64	    0049  74 6F	90 90		     jz	copy_direct
     65	    004D  83 FA	01		     cmp dx, 1	    ; Если только одно слово, обрабатываем   +
     66					 отдельно
     67	    0050  74 45	90 90		     je	handle_single_word
     68
     69					     ; Вычисляем, сколько пробелов добавить
     70	    0054  8B C3			     mov ax, bx	    ; AX = k
     71	    0056  2B C1			     sub ax, cx	    ; AX = количество	пробелов для	добавления
     72	    0058  8B CA			     mov cx, dx	    ; CX = количество	слов
     73	    005A  49			     dec cx	    ; CX = количество	промежутков (n-1)
     74
     75					     ; Делим пробелы между промежутками
     76	    005B  33 D2			     xor dx, dx
     77	    005D  F7 F1			     div cx	    ; AX = p (базовые пробелы), DX = q (доп. пробелы)
     78
     79					     ; Начинаем	копирование с добавлением пробелов
     80	    005F  33 C9			     xor cx, cx	    ; CX = счетчик промежутков
     81	    0061  8B D8			     mov bx, ax	    ; BX = p
     82
     83	    0063			 copy_loop:
     84	    0063  8A 04			     mov al, [si]   ; Читаем символ
     85	    0065  46			     inc si
     86	    0066  84 C0			     test al, al    ; Если конец строки,	завершаем
     87	    0068  74 27	90 90		     jz	end_ins
     88
     89	    006C  3C 20			     cmp al, ' '    ; Если пробел, добавляем	дополнительные
     90	    006E  75 1C	90 90		     jne copy_char
     91
     92					     ; Вставляем пробелы
     93	    0072  51			     push cx	    ; Сохраняем счетчик	промежутков
     94	    0073  B9 0001		     mov cx, 1	    ; Минимум 1 пробел
     95	    0076  03 CB			     add cx, bx	    ; Добавляем p пробелов
     96
     97					     ; Проверяем, нужно ли добавить еще один пробел    +
     98					 (если q > 0)
     99	    0078  58			     pop ax	    ; AX = текущий промежуток
    100	    0079  3B C2			     cmp ax, dx	    ; Сравниваем с q
    101	    007B  73 03	90 90		     jae no_extra   ; Если >= q, не добавляем
    102	    007F  41			     inc cx	    ; Иначе добавляем 1 пробел
    103	    0080			 no_extra:
    104	    0080  50			     push ax	    ; Восстанавливаем счетчик
    105
    106					     ; Вставляем пробелы в буфер результата
    107	    0081  B0 20			     mov al, ' '
    108	    0083			 insert_spaces:
    109	    0083  88 05			     mov [di], al
    110	    0085  47			     inc di
    111	    0086  E2 FB			     loop insert_spaces
    112
    113	    0088  59			     pop cx	    ; Восстанавливаем счетчик промежутков
    114	    0089  41			     inc cx	    ; Увеличиваем его
Turbo Assembler	 Version 4.1	    05/30/25 09:09:23	    Page 3
prog.asm



    115	    008A  EB D7			     jmp copy_loop
    116
    117	    008C			 copy_char:
    118	    008C  88 05			     mov [di], al   ; Копируем символ в результат
    119	    008E  47			     inc di
    120	    008F  EB D2			     jmp copy_loop
    121
    122	    0091			 end_ins:
    123	    0091  C6 05	00		     mov byte ptr [di],	0 ; Завершаем строку нулем
    124	    0094  EB 2E	90		     jmp done
    125
    126	    0097			 handle_single_word:
    127					     ; Копируем	слово и добавляем пробелы	в конец
    128	    0097  8A 04			     mov al, [si]
    129	    0099  84 C0			     test al, al
    130	    009B  74 08	90 90		     jz	add_tail_spaces
    131	    009F  88 05			     mov [di], al
    132	    00A1  47			     inc di
    133	    00A2  46			     inc si
    134	    00A3  EB F2			     jmp handle_single_word
    135
    136	    00A5			 add_tail_spaces:
    137					     ; Добавляем пробелы до длины k
    138	    00A5  8B 46	06		     mov ax, [bp+6] ; AX = k
    139	    00A8  2B C1			     sub ax, cx	    ; AX = количество	пробелов
    140	    00AA  8B C8			     mov cx, ax
    141	    00AC  7E 06	90 90		     jle done_tail  ; Если <= 0, пропускаем
    142	    00B0  B0 20			     mov al, ' '
    143	    00B2  F3> AA		     rep stosb	    ; Заполняем пробелами
    144	    00B4			 done_tail:
    145	    00B4  C6 05	00		     mov byte ptr [di],	0
    146	    00B7  EB 0B	90		     jmp done
    147
    148	    00BA			 copy_direct:
    149					     ; Просто копируем строку без изменений
    150	    00BA  8A 04			     mov al, [si]
    151	    00BC  88 05			     mov [di], al
    152	    00BE  46			     inc si
    153	    00BF  47			     inc di
    154	    00C0  84 C0			     test al, al
    155	    00C2  75 F6			     jnz copy_direct
    156
    157	    00C4			 done:
    158	    00C4  5A			     pop dx	    ; Восстанавливаем регистры
    159	    00C5  59			     pop cx
    160	    00C6  5B			     pop bx
    161	    00C7  5F			     pop di
    162	    00C8  5E			     pop si
    163	    00C9  5D			     pop bp
    164	    00CA  C2 0006		     ret 6	    ; Возврат с	очисткой 6 байт аргументов
    165	    00CD			 InsBlanks endp
    166					 end
Turbo Assembler	 Version 4.1	    05/30/25 09:09:23	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05/30/25"
??FILENAME			  Text	 "prog	  "
??TIME				  Text	 "09:09:23"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROG
@INTERFACE			  Text	 000H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADD_TAIL_SPACES			  Near	 _TEXT:00A5
COPY_CHAR			  Near	 _TEXT:008C
COPY_DIRECT			  Near	 _TEXT:00BA
COPY_LOOP			  Near	 _TEXT:0063
COUNT_LOOP			  Near	 _TEXT:001E
DONE				  Near	 _TEXT:00C4
DONE_TAIL			  Near	 _TEXT:00B4
END_COUNT			  Near	 _TEXT:003E
END_INS				  Near	 _TEXT:0091
HANDLE_SINGLE_WORD		  Near	 _TEXT:0097
INSBLANKS			  Near	 _TEXT:0000
INSERT_SPACES			  Near	 _TEXT:0083
NEXT_CHAR			  Near	 _TEXT:003B
NOT_NEW_WORD			  Near	 _TEXT:0036
NO_EXTRA			  Near	 _TEXT:0080
SPACE_CHAR			  Near	 _TEXT:0039

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
_TEXT				  16  00CD Word	  Public  CODE
